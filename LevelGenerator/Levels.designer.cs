#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LevelGenerator
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LevelsData")]
	public partial class LevelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLevel(Level instance);
    partial void UpdateLevel(Level instance);
    partial void DeleteLevel(Level instance);
    #endregion
		
		public LevelsDataContext() : 
				base(global::LevelGenerator.Properties.Settings.Default.LevelsDataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LevelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LevelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LevelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LevelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Level> Levels
		{
			get
			{
				return this.GetTable<Level>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Level]")]
	public partial class Level : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MovesCount;
		
		private int _Difficulty;
		
		private int _DistancesSum;
		
		private string _Moves;
		
		private bool _IsUsed;
		
		private System.Nullable<int> _MobileLevelId;
		
		private double _NewDifficulty;
		
		private System.Nullable<int> _DisbaledAreasId;
		
		private int _BoardSize;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMovesCountChanging(int value);
    partial void OnMovesCountChanged();
    partial void OnDifficultyChanging(int value);
    partial void OnDifficultyChanged();
    partial void OnDistancesSumChanging(int value);
    partial void OnDistancesSumChanged();
    partial void OnMovesChanging(string value);
    partial void OnMovesChanged();
    partial void OnIsUsedChanging(bool value);
    partial void OnIsUsedChanged();
    partial void OnMobileLevelIdChanging(System.Nullable<int> value);
    partial void OnMobileLevelIdChanged();
    partial void OnNewDifficultyChanging(double value);
    partial void OnNewDifficultyChanged();
    partial void OnDisbaledAreasIdChanging(System.Nullable<int> value);
    partial void OnDisbaledAreasIdChanged();
    partial void OnBoardSizeChanging(int value);
    partial void OnBoardSizeChanged();
    #endregion
		
		public Level()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovesCount", DbType="Int NOT NULL")]
		public int MovesCount
		{
			get
			{
				return this._MovesCount;
			}
			set
			{
				if ((this._MovesCount != value))
				{
					this.OnMovesCountChanging(value);
					this.SendPropertyChanging();
					this._MovesCount = value;
					this.SendPropertyChanged("MovesCount");
					this.OnMovesCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Difficulty", DbType="Int NOT NULL")]
		public int Difficulty
		{
			get
			{
				return this._Difficulty;
			}
			set
			{
				if ((this._Difficulty != value))
				{
					this.OnDifficultyChanging(value);
					this.SendPropertyChanging();
					this._Difficulty = value;
					this.SendPropertyChanged("Difficulty");
					this.OnDifficultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistancesSum", DbType="Int NOT NULL")]
		public int DistancesSum
		{
			get
			{
				return this._DistancesSum;
			}
			set
			{
				if ((this._DistancesSum != value))
				{
					this.OnDistancesSumChanging(value);
					this.SendPropertyChanging();
					this._DistancesSum = value;
					this.SendPropertyChanged("DistancesSum");
					this.OnDistancesSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Moves", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Moves
		{
			get
			{
				return this._Moves;
			}
			set
			{
				if ((this._Moves != value))
				{
					this.OnMovesChanging(value);
					this.SendPropertyChanging();
					this._Moves = value;
					this.SendPropertyChanged("Moves");
					this.OnMovesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUsed", DbType="Bit NOT NULL")]
		public bool IsUsed
		{
			get
			{
				return this._IsUsed;
			}
			set
			{
				if ((this._IsUsed != value))
				{
					this.OnIsUsedChanging(value);
					this.SendPropertyChanging();
					this._IsUsed = value;
					this.SendPropertyChanged("IsUsed");
					this.OnIsUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileLevelId", DbType="Int")]
		public System.Nullable<int> MobileLevelId
		{
			get
			{
				return this._MobileLevelId;
			}
			set
			{
				if ((this._MobileLevelId != value))
				{
					this.OnMobileLevelIdChanging(value);
					this.SendPropertyChanging();
					this._MobileLevelId = value;
					this.SendPropertyChanged("MobileLevelId");
					this.OnMobileLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewDifficulty", DbType="Float NOT NULL")]
		public double NewDifficulty
		{
			get
			{
				return this._NewDifficulty;
			}
			set
			{
				if ((this._NewDifficulty != value))
				{
					this.OnNewDifficultyChanging(value);
					this.SendPropertyChanging();
					this._NewDifficulty = value;
					this.SendPropertyChanged("NewDifficulty");
					this.OnNewDifficultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisbaledAreasId", DbType="Int")]
		public System.Nullable<int> DisbaledAreasId
		{
			get
			{
				return this._DisbaledAreasId;
			}
			set
			{
				if ((this._DisbaledAreasId != value))
				{
					this.OnDisbaledAreasIdChanging(value);
					this.SendPropertyChanging();
					this._DisbaledAreasId = value;
					this.SendPropertyChanged("DisbaledAreasId");
					this.OnDisbaledAreasIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoardSize", DbType="Int NOT NULL")]
		public int BoardSize
		{
			get
			{
				return this._BoardSize;
			}
			set
			{
				if ((this._BoardSize != value))
				{
					this.OnBoardSizeChanging(value);
					this.SendPropertyChanging();
					this._BoardSize = value;
					this.SendPropertyChanged("BoardSize");
					this.OnBoardSizeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
